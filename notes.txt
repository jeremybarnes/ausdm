
jeremy@jeremy-desktop:~/projects/ausdm$ for n in 1 2 3 4 5 7 10 12 15 17 20 25 30 40 50; do echo -n "$n "; ./build/x86_64/bin/ausdm -T 0.20 -t rmse blender.num_models=$n 2>/dev/null | tail -n1; done
1 0.8692
2 0.8659
3 0.8643
4 0.8627
5 0.8602
7 0.8597
10 0.8597
12 0.8592
15 0.8591
17 0.8594
20 0.8596
25 0.8603
30 0.8605
40 0.8606
50 0.8608

jeremy@jeremy-desktop:~/projects/ausdm$ for n in 1 2 3 4 5 7 10 12 15 17 20 25 30 40 50; do echo -n "$n "; ./build/x86_64/bin/ausdm -T 0.20 -t auc blender.num_models=$n 2>/dev/null | tail -n1; done
1 0.8828
2 0.8869
3 0.8867
4 0.8860
5 0.8871
7 0.8867
10 0.8865
12 0.8862
15 0.8858
17 0.8859
20 0.8856
25 0.8854
30 0.8853
40 0.8851
50 0.8851

So, 15 models seems to be good for RMSE and 5 for AUC



-------

jeremy@jeremy-desktop:~/projects/ausdm$ for n in 1 2 3 4 5 7 10 12 15 17 20 25 30 40 50; do echo -n "$n "; ./build/x86_64/bin/ausdm -T 0.20 -t rmse blender.num_models=$n -r 10 2>/dev/null | tail -n1; done
1 0.8761 +/- 0.0151
2 0.8706 +/- 0.0144
3 0.8688 +/- 0.0142
4 0.8681 +/- 0.0145
5 0.8675 +/- 0.0139
7 0.8669 +/- 0.0139
10 0.8664 +/- 0.0140
12 0.8662 +/- 0.0141
15 0.8659 +/- 0.0140
17 0.8659 +/- 0.0140
20 0.8656 +/- 0.0140
25 0.8658 +/- 0.0140
30 0.8661 +/- 0.0140
40 0.8664 +/- 0.0139
50 0.8666 +/- 0.0139


jeremy@jeremy-desktop:~/projects/ausdm$ for n in 1 2 3 4 5 7 10 12 15 17 20 25 30 40 50; do echo -n "$n "; ./build/x86_64/bin/ausdm -T 0.20 -t auc blender.num_models=$n -r 10 2>/dev/null | tail -n1; done
1 0.8750 +/- 0.0090
2 0.8788 +/- 0.0081
3 0.8792 +/- 0.0080
4 0.8786 +/- 0.0079
5 0.8797 +/- 0.0075
7 0.8804 +/- 0.0072
10 0.8800 +/- 0.0074
12 0.8799 +/- 0.0074
15 0.8798 +/- 0.0075
17 0.8796 +/- 0.0075
20 0.8794 +/- 0.0075
25 0.8789 +/- 0.0077
30 0.8783 +/- 0.0079
40 0.8777 +/- 0.0080
50 0.8774 +/- 0.0081

Better results (more trials): 15-20 for RMSE, 7 for AUC


Boosting:

./build/x86_64/bin/ausdm -T 0.20 -t auc blender.num_models=5 -r 10

0.8779 +/- 0.0077

Not much good f as a first try...



With impossible examples excluded:

./build/x86_64/bin/ausdm -T 0.20 -t auc blender.num_models=5 -r 10

0.8776 +/- 0.0080

Still not much good...


With early stopping:

0.8772 +/- 0.0077

Even worse, not encouraging


With selection via margin:

0.8773 +/- 0.0076

Not any better!


Minor tweaks:

0.8779 +/- 0.0080

------------------------

Gated solution, try 1:

./build/x86_64/bin/ausdm -T 0.20 -t auc -r 10

0.8799 +/- 0.0074


With bug fixes:

0.8804 +/- 0.0074


Predicting actual margin (but using logit) (removed)

0.8801 +/- 0.0074


20 inputs

0.8798 +/- 0.0076

Back to 10 inputs, with extra statistical features:

0.8807 +/- 0.0075

Added a few extra along the same lines:

0.8807 +/- 0.0075

Removed decomposition features:

0.8805 +/- 0.0074

But this is in spite of the fact that the confidence functions got much, much worse:

Before:

trial 9
200 models... 15000 rows... n = 12000 m = 200 nvalues = 200
model 123: before 0.873762/0.256815 after 0.366578/0.535418
model 71: before 0.870887/0.24351 after 0.340936/0.541159
model 81: before 0.870203/0.24804 after 0.35414/0.536658
model 7: before 0.870063/0.260856 after 0.380631/0.544828
model 65: before 0.86898/0.25535 after 0.372716/0.547804
model 46: before 0.868584/0.261021 after 0.384278/0.541895
model 140: before 0.871122/0.25586 after 0.379631/0.533441
model 88: before 0.871134/0.252219 after 0.374164/0.532919
model 150: before 0.871441/0.23935 after 0.339959/0.533688
model 167: before 0.87121/0.260366 after 0.383654/0.540394


After:

trial 9
200 models... 15000 rows... n = 12000 m = 200 nvalues = 200
model 88: before 0.871134/0.252219 after 0.539543/0.308744
model 71: before 0.870887/0.24351 after 0.47926/0.326779
model 123: before 0.873762/0.256815 after 0.534246/0.299965
model 140: before 0.871122/0.25586 after 0.544026/0.309047
model 7: before 0.870063/0.260856 after 0.537814/0.337856
model 81: before 0.870203/0.24804 after 0.515196/0.318835
model 65: before 0.86898/0.25535 after 0.52039/0.337979
model 46: before 0.868584/0.261021 after 0.541253/0.335966
model 167: before 0.87121/0.260366 after 0.563316/0.308776
model 150: before 0.871441/0.23935 after 0.516603/0.288806


